from collections import defaultdict
import spacy
import emoji
from typing import List, Dict
import google.generativeai as genai
import config

# load the Spanish NLP model
nlp = spacy.load("es_core_news_md")

# Load the Gemini model
genai.configure(api_key=config.GEMINI_API_KEY)
gemini = genai.GenerativeModel('gemini-2.0-flash')

# Manual mapping of emojis to features in Spanish
EMOJI_TO_FEATURES = {
    "üòÇ": ["comedia", "felicidad"],
    "‚ù§Ô∏è": ["amor", "romance"],
    "ü•≤": ["nostalgia", "emoci√≥n"],
    "üëç": ["positivo", "aceptaci√≥n"],
    "ü•∞": ["amor", "ternura"],
    "üòç": ["romance", "atracci√≥n"],
    "üò≠": ["tristeza", "drama"],
    "üôè": ["agradecimiento", "esperanza"],
    "üî•": ["acci√≥n", "intensidad"],
    "üíñ": ["amor", "brillo"],
    "üòé": ["confianza", "cool"],
    "‚ú®": ["fantas√≠a", "magia"],
    "üò°": ["ira", "conflicto"],
    "üòÖ": ["nervios", "situaciones inc√≥modas"],
    "‚úÖ": ["resuelto", "positivo"],
    "üò±": ["terror", "sorpresa"],
    "ü§î": ["reflexi√≥n", "misterio"],
    "üòê": ["neutral", "apat√≠a"],
    "‚òπÔ∏è": ["melancol√≠a", "tristeza"],
    "üëè": ["logro", "aplausos"],
    "üòò": ["beso", "coqueto"],
    "üòú": ["diversi√≥n", "irreverente"],
    "üíî": ["ruptura", "drama"],
    "üò¥": ["aburrimiento", "relajaci√≥n"],
    "üò≤": ["sorpresa", "incre√≠ble"],
    "üòª": ["amor", "ternura"],
    "ü§≠": ["verg√ºenza", "secreto"],
    "ü§Ø": ["mente volada", "impacto"],
    "üòµ": ["confusi√≥n", "caos"],
    "üåç": ["global", "realidad"],
    "üòà": ["rebeld√≠a", "villano"],
    "üí©": ["humor", "irreverencia"],
    "ü§°": ["absurdo", "enga√±o"],
    "ü•≥": ["celebraci√≥n", "fiesta"],
    "ü•Ç": ["brindis", "evento especial"],
    "üç∫": ["relajo", "amistad"],
    "üé¨": ["cine", "pel√≠culas"],
    "üçø": ["cine", "entretenimiento"],
    "‚≠ê": ["favorito", "excelente"],
    "üëÄ": ["curiosidad", "atenci√≥n"],
    "‚è∞": ["tiempo", "urgencia"],
    "ü¶ã": ["transformaci√≥n", "belleza"],
    "üòπ": ["comedia", "gatos"],
    "ü´†": ["derretido", "verg√ºenza"],
    "ü§û": ["esperanza", "deseo"],
    "üòá": ["inocencia", "bondad"],
    "üò¨": ["incomodidad", "tensi√≥n"],
    "üéâ": ["celebraci√≥n", "fiesta"],
    "ü´∂": ["cari√±o", "apoyo"],
    "üéß": ["m√∫sica", "concentraci√≥n"]
}


def emoji_to_spanish_text(emoji_char: str) -> List[str]:
    #verify if the emoji is in the local mapping
    if emoji_char in EMOJI_TO_FEATURES:
        return EMOJI_TO_FEATURES[emoji_char]
    
    # if not, use the emoji library to get the name in Spanish
    emoji_name_es = emoji.demojize(emoji_char, language='es').strip(":").replace("_", " ")
    
    #Process the emoji name with spaCy
    doc = nlp(emoji_name_es)
    keywords = [
        token.text.lower() 
        for token in doc 
        if token.pos_ in ["NOUN", "ADJ"] and len(token.text) > 3
    ]
    
    return keywords if keywords else [emoji_name_es]

def get_emotion_profile(emojis: List[str]) -> Dict[str, float]:
    #generate a profile of emotions based on the emojis
    emotion_counts = defaultdict(int)
    total = 0
    
    for emoji_char in emojis:
        keywords = emoji_to_spanish_text(emoji_char)
        for word in keywords:
            emotion_counts[word] += 1
        total += len(keywords)
    
    return {k: v/total for k, v in emotion_counts.items()} if total > 0 else {}

def extract_mood_tags(text: str) -> List[str]:
    # Extract mood tags from the free text
    doc = nlp(text)
    return [
        token.text.lower()
        for token in doc
        if token.pos_ in ["NOUN", "ADJ"] and len(token.text) > 4
    ][:11]

def generate_gemini_explanation(group_data, movie, affinity_score: float, is_top:bool) -> str:
    prompt = f"""
    Eres un experto en recomendaci√≥n de pel√≠culas. Genera una explicaci√≥n clara y amigable en espa√±ol latino (m√°ximo 7 frases) de por qu√© la pel√≠cula {movie.title} 
    es buena para el grupo que busca **{group_data.mood}**. 

    Contexto:
    - G√©neros favoritos del grupo: {', '.join([g for p in group_data.people for g in p.genre])}
    - Emojis del grupo: {', '.join([e for p in group_data.people for e in p.emojis])}
    - Texto libre del grupo: "{group_data.comments}" (Si no hay, omite este punto)
    - Porcentaje de afinidad: {affinity_score*100:.1f}%

    La pel√≠cula:
    - G√©neros: {', '.join(movie.genres)}
    - Rating: {movie.audience_rating}/10
    - Mood tags: {', '.join(movie.mood_tags)}

    Instrucciones:
    {"¬°Destacar como la mejor recomendaci√≥n usando 2 emojis relevantes!" if is_top else "1. Presentar como buena alternativa con 1 emoji"}
    1. Usa emojis relevantes.
    2. Destaca 1-2 caracter√≠sticas clave.
    3. S√© entusiasta queremos que vayan al cine.
    4. Explica c√≥mo se relaciona con el mood del grupo.
        """
    
    response = gemini.generate_content(prompt)
    return response.text